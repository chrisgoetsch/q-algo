import secrets
import hashlib
import base64
import urllib.parse
import json

# ‚öôÔ∏è Config
CLIENT_ID = "8uCRRizNTzgBuTdkIZF7zaZiouYcKZH7"  # Your actual client ID 
from TradeStation
REDIRECT_URI = "https://q-algo.com/callback"  # The callback URL 
registered with TradeStation

# üîê Generate new code verifier and challenge
code_verifier = secrets.token_urlsafe(64)  # Cryptographically secure 
random string
code_challenge = base64.urlsafe_b64encode(
    hashlib.sha256(code_verifier.encode()).digest()
).decode().rstrip('=')  # SHA256 hash of code_verifier, base64 encoded

# üåê Build the authorization URL
params = {
    "response_type": "code",  # We are requesting an authorization code
    "client_id": CLIENT_ID,  # The client ID registered for your app
    "redirect_uri": REDIRECT_URI,  # The redirect URI after successful 
login
    "code_challenge": code_challenge,  # The hashed challenge
    "code_challenge_method": "S256",  # The hashing method used for PKCE
    "scope": "openid profile offline_access MarketData Trade OptionSpreads 
Matrix",  # Required scopes
}

# Construct the URL with all parameters
auth_url = 
f"https://signin.tradestation.com/authorize?{urllib.parse.urlencode(params)}"

# ‚úèÔ∏è Save code_verifier for future use during token exchange
with open("pkce_state.json", "w") as f:
    json.dump({"code_verifier": code_verifier}, f)

# Output the URL that the user will visit to authorize the app
print("\nüîó Open this URL in your browser to authorize Q Algo:\n")
print(auth_url)

